% TW Prolog - Comprehensive Family Relationship Knowledge Base
% This program demonstrates advanced Prolog features including:
% - Complex family relationships across multiple generations
% - Recursive rules for ancestor/descendant relationships
% - Multiple relationship types (parent, child, sibling, spouse)
% - Age-based relationships (older/younger)
% - Educational institution relationships
% - Query examples and demonstrations

% Facts: Basic family relationships
% Parents
parent(john_smith, mary_smith).
parent(john_smith, robert_smith).
parent(john_smith, linda_smith).
parent(susan_jones, mary_smith).
parent(susan_jones, robert_smith).
parent(susan_jones, linda_smith).

parent(mary_smith, james_wilson).
parent(mary_smith, sarah_wilson).
parent(mary_smith, michael_wilson).
parent(david_wilson, james_wilson).
parent(david_wilson, sarah_wilson).
parent(david_wilson, michael_wilson).

parent(robert_smith, emily_smith).
parent(robert_smith, daniel_smith).
parent(jennifer_brown, emily_smith).
parent(jennifer_brown, daniel_smith).

parent(linda_smith, christopher_davis).
parent(linda_smith, rachel_davis).
parent(mark_davis, christopher_davis).
parent(mark_davis, rachel_davis).

% Spouses
spouse(john_smith, susan_jones).
spouse(susan_jones, john_smith).
spouse(mary_smith, david_wilson).
spouse(david_wilson, mary_smith).
spouse(robert_smith, jennifer_brown).
spouse(jennifer_brown, robert_smith).
spouse(linda_smith, mark_davis).
spouse(mark_davis, linda_smith).

% Ages (for age-based relationships)
age(john_smith, 75).
age(susan_jones, 73).
age(mary_smith, 45).
age(david_wilson, 48).
age(robert_smith, 42).
age(jennifer_brown, 40).
age(linda_smith, 38).
age(mark_davis, 41).
age(james_wilson, 22).
age(sarah_wilson, 20).
age(michael_wilson, 18).
age(emily_smith, 15).
age(daniel_smith, 12).
age(christopher_davis, 10).
age(rachel_davis, 8).

% Gender
male(john_smith).
male(robert_smith).
male(david_wilson).
male(james_wilson).
male(michael_wilson).
male(daniel_smith).
male(mark_davis).
male(christopher_davis).

female(susan_jones).
female(mary_smith).
female(linda_smith).
female(jennifer_brown).
female(sarah_wilson).
female(emily_smith).
female(rachel_davis).

% Education
student(james_wilson, university).
student(sarah_wilson, university).
student(michael_wilson, high_school).
student(emily_smith, high_school).
student(daniel_smith, middle_school).
student(christopher_davis, elementary).
student(rachel_davis, elementary).

teacher(mary_smith, high_school).
teacher(david_wilson, university).
teacher(robert_smith, middle_school).

% Rules: Derived relationships

% Child relationship (inverse of parent)
child(X, Y) :- parent(Y, X).

% Sibling relationship
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

% Brother and sister
brother(X, Y) :- sibling(X, Y), male(X).
sister(X, Y) :- sibling(X, Y), female(X).

% Grandparent relationship
grandparent(X, Y) :- parent(X, Z), parent(Z, Y).

% Grandchild relationship
grandchild(X, Y) :- grandparent(Y, X).

% Great-grandparent
great_grandparent(X, Y) :- grandparent(X, Z), parent(Z, Y).

% Ancestor relationship (recursive)
ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).

% Descendant relationship (recursive)
descendant(X, Y) :- child(X, Y).
descendant(X, Y) :- child(X, Z), descendant(Z, Y).

% Uncle/Aunt relationships
uncle(X, Y) :- brother(X, Z), parent(Z, Y).
aunt(X, Y) :- sister(X, Z), parent(Z, Y).

% Nephew/Niece relationships
nephew(X, Y) :- male(X), (uncle(Y, X); aunt(Y, X)).
niece(X, Y) :- female(X), (uncle(Y, X); aunt(Y, X)).

% Cousin relationship
cousin(X, Y) :- parent(A, X), parent(B, Y), sibling(A, B), X \= Y.

% Age-based relationships
older(X, Y) :- age(X, AgeX), age(Y, AgeY), AgeX > AgeY.
younger(X, Y) :- age(X, AgeY), age(Y, AgeY), AgeX < AgeY.
same_age(X, Y) :- age(X, Age), age(Y, Age).

% Family member (anyone connected by blood or marriage)
family_member(X, Y) :- ancestor(X, Y).
family_member(X, Y) :- descendant(X, Y).
family_member(X, Y) :- sibling(X, Y).
family_member(X, Y) :- spouse(X, Y).
family_member(X, Y) :- family_member(X, Z), family_member(Z, Y).

% Generation level (0 = current, 1 = parents, 2 = grandparents, etc.)
generation(X, 0) :- \+ parent(_, X), \+ child(X, _).  % No parents or children
generation(X, N) :- parent(X, Y), generation(Y, M), N is M - 1, N >= 0.
generation(X, N) :- child(X, Y), generation(Y, M), N is M + 1.

% Educational relationships
classmate(X, Y) :- student(X, Level), student(Y, Level), X \= Y.
teacher_of(T, S) :- teacher(T, Level), student(S, Level).

% Complex family queries
% Find all relatives of a person
all_relatives(X, Y) :- family_member(X, Y), X \= Y.

% Find people with no living descendants
childless(X) :- \+ parent(X, _).

% Find people who are both parents and grandparents
sandwich_generation(X) :- parent(X, Y), grandparent(X, Z).

% Find large families (more than 2 children)
large_family(Parent) :- parent(Parent, A), parent(Parent, B), parent(Parent, C), A \= B, A \= C, B \= C.

% Find people who have siblings but no children
aunt_uncle_no_kids(X) :- (uncle(X, _); aunt(X, _)), \+ parent(X, _).

% Age gap between siblings
age_gap(X, Y, Gap) :- sibling(X, Y), age(X, AgeX), age(Y, AgeY), Gap is abs(AgeX - AgeY).

% Educational family patterns
educated_family(X) :- parent(X, Y), student(Y, university), teacher(X, _).

% Multi-generational education
education_tradition(X) :- grandparent(X, Y), student(Y, university), teacher(X, _).

% Query examples (these would be run as queries):
% ?- ancestor(john_smith, X).           % All descendants of John
% ?- descendant(X, john_smith).         % All ancestors of John
% ?- sibling(mary_smith, X).            % Mary's siblings
% ?- cousin(james_wilson, X).           % James's cousins
% ?- older(X, Y).                       % All older/younger pairs
% ?- classmate(X, Y).                   % Classmates
% ?- large_family(X).                   % Parents with 3+ children
% ?- generation(X, 2).                  % Great-grandparents
% ?- educated_family(X).                % Educated families
% ?- age_gap(X, Y, Gap), Gap > 5.       % Siblings with large age gaps